import "./App.css";
import About from "./components/About";
import Cards from "./components/Cards";
import Detail from "./components/Detail";
import Favorites from "./components/Favorites";
import Form from "./components/Form";
import Nav from "./components/Nav";
import axios from "axios";
import { useState, useEffect } from "react";
import { Routes, Route, useLocation, useNavigate } from "react-router-dom";

// "URL_BASE" y "API_KEY" solicitudes a la API externa.
// const URL_BASE = "https://be-a-rym.up.railway.app/api/character"; ‚ùå
// const API_KEY = "54a723701c95.c970f983b34a0bc36b17";

// Credenciales que se utilizar√°n para la autenticaci√≥n del usuario.
// const email = "valentina@gmail.com";
// const password = "jericho07";
const URL = "http://localhost:3001/rickandmorty/login";

// La funci√≥n App es el componente principal que contiene el estado de la aplicaci√≥n.
function App() {
  const location = useLocation();
  const navigate = useNavigate();

  const [characters, setCharacters] = useState([]);
  const [access, setAccess] = useState(false); // Inicialmente, el estado de acceso est√° establecido en falso.

  // LOGIN ANTERIOR ‚ùå
  // La funci√≥n login comprueba si las credenciales que el usuario ha ingresado son v√°lidas y establece el estado de acceso en true si son correctas, y lleva al usuario a la p√°gina de inicio (/home) utilizando la funci√≥n navigate.
  // const login = (userData) => {
  //   if (userData.email === email && userData.password === password) {
  //     setAccess(true);
  //     navigate("/home");
  //   } else {
  //     alert("Credenciales incorrectas");
  //   }
  // };

  // ‚òòÔ∏è‚òòÔ∏è‚òòÔ∏è Homework EXPRESS - LOGIN NUEVO üòâ
  // const login = (userData) => {

  //   const { email, password } = userData;
  //   const URL = "http://localhost:3001/rickandmorty/login/";

  //   axios(URL + `?email=${email}&password=${password}`).then(({ data }) => {
  //     const { access } = data;
  //     setAccess(data);
  //     access && navigate("/home");
  //   });
  // };

  console.log("Login");
  // ‚òòÔ∏è‚òòÔ∏è‚òòÔ∏è Homework ASYNC-AWAIT - LOGIN NUEVO üòâ
  const login = async (userData) => {
    try {
      const { email, password } = userData;
      const { data } = await axios(
        URL + `?email=${email}&password=${password}`
      );
      const { access } = data;

      setAccess(access);
      access && navigate("/home");
    } catch (error) {
      console.log(error.message);
    }
  };

  // La funci√≥n useEffect (hook) comprueba el estado de acceso y utiliza la funci√≥n navigate para redirigir al usuario a la p√°gina de inicio si el estado de acceso es falso. (efectos secundarios)
  useEffect(() => {
    !access && navigate("/");
  }, [access]);

  // ONSEARCH ANTERIOR ‚ùå

  // La funci√≥n onSearch utiliza la biblioteca axios para enviar una solicitud GET a la API externa con un id de personaje proporcionado por el usuario. Si la solicitud es exitosa, el personaje devuelto se agrega a la lista de personajes del estado de la aplicaci√≥n. Si el personaje ya est√° en la lista, se muestra una alerta para notificar al usuario. Si no se encuentra ning√∫n personaje con ese id, tambi√©n se muestra una alerta. onSearch se defini√≥ en el componente App en lugar de en el componente SearchBar porque la acci√≥n que se realiza en la funci√≥n onSearch afecta al estado de characters en App.
  // const onSearch = (id) => {

  //   axios(`http://localhost:3001/rickandmorty/character/${id}`) // url anterior: axios(`${URL_BASE}/${id}?key=${API_KEY}`) ‚ùå
  //     .then((response) => response.data)
  //     .then((data) => {
  //       if (data.name) {
  //         // La funci√≥n foundCharacter comprueba si el personaje que se est√° agregando ya est√° en la lista de personajes y evita que se agregue nuevamente.
  //         const foundCharacter = characters.find(
  //           // El m√©todo .find() se utiliza para buscar un elemento espec√≠fico en un arreglo. Esta fn de devoluci√≥n de llamada se ejecuta una vez para cada elemento en characters y compara el id de cada elemento con el id de data.
  //           (character) => character.id === data.id
  //         );
  //         // Si se encuentra un personaje con el mismo id que el personaje devuelto por la API...
  //         if (foundCharacter) {
  //           window.alert("¬°Este personaje ya se encuentra en la lista!");
  //         } else {
  //           setCharacters((oldChars) => [...oldChars, data]);
  //         }
  //       } else {
  //         window.alert("¬°No hay personajes con este ID!");
  //       }
  //     });
  // };

  console.log("On search");
  // ‚òòÔ∏è‚òòÔ∏è‚òòÔ∏è Homework ASYNC-AWAIT - ONSEARCH NUEVO üòâ
  const onSearch = async (id) => {
    try {
      const response = await axios(
        `http://localhost:3001/rickandmorty/character/${id}`
      );
      const data = response.data;

      if (data.name) {
        const foundCharacter = characters.find(
          (character) => character.id === data.id
        );

        if (foundCharacter) {
          window.alert("¬°Este personaje ya se encuentra en la lista!");
        } else {
          setCharacters((oldChars) => [...oldChars, data]);
        }
      } else {
        window.alert("¬°No hay personajes con este ID!");
      }
    } catch (error) {
      console.error(error);
    }
  };

  // La funci√≥n onClose filtra la lista de personajes del estado de la aplicaci√≥n para eliminar el personaje seleccionado.
  const onClose = (id) => {
    const filteredCharacters = characters.filter(
      (character) => Number(character.id) !== Number(id)
    );
    // Number(character.id) se utiliza para convertir el valor del id del personaje en un n√∫mero antes de hacer la comparaci√≥n con Number(id), que tambi√©n se convierte en n√∫mero. De esta manera, se asegura que se est√°n comparando valores num√©ricos y no cadenas de texto, es una buena pr√°ctica asegurarse de que los tipos de datos sean los mismos antes de realizar comparaciones, para evitar errores inesperados

    setCharacters(filteredCharacters);
  };

  return (
    <div className="App">
      {
        // Nav se renderiza si la ruta actual no es la ruta ra√≠z (/).
        location.pathname !== "/" && (
          <Nav onSearch={onSearch} setAccess={setAccess} />
        )
      }

      {/* Routes envuelve las rutas de la aplicaci√≥n, para que se renderice el componente correspondiente 
      a la ruta que se est√° visitando */}
      <Routes>
        {/* Route representa una ruta de la aplicaci√≥n. Su propiedad "path" define la ruta en la URL y "element" define el componente que se renderizar√° cuando la ruta especificada en "path" sea visitada. */}
        <Route path="/" element={<Form login={login} />} />

        <Route
          path="/home"
          // El componente card recibe 2 props, characters que contiene informaci√≥n sobre los personajes que se van a mostrar en la p√°gina, y onClose es una funci√≥n que se encarga de eliminar un personaje de la lista.
          element={<Cards characters={characters} onClose={onClose} />}
        />

        <Route path="/about" element={<About />} />
        <Route path="/detail/:id" element={<Detail />} />
        <Route path="/favorites" element={<Favorites onClose={onClose} />} />
        
      </Routes>
    </div>
  );
}

export default App;

// Finalmente, la funci√≥n App devuelve la estructura principal de la aplicaci√≥n que incluye un componente de navegaci√≥n que se muestra en todas las p√°ginas excepto en la p√°gina de inicio. Las rutas est√°n definidas en la funci√≥n "Routes" de "react-router-dom" que carga el componente adecuado seg√∫n la ruta actual.

// Recordar que:
// Los hooks son funciones especiales que te permiten "enganchar" o conectar la l√≥gica de tu componente a ciertos comportamientos espec√≠ficos.

// En el caso de useEffect, te permite realizar efectos secundarios en tu componente en respuesta a ciertos cambios de estado. En este caso, el efecto secundario se activar√° cuando access cambie, y si access es falso, el componente navegar√° a la p√°gina principal.
